clear all;

rng('shuffle');
load fisheriris;


DiscrimType = 'linear';

%Entrenamiento:
Mdl = fitcdiscr(meas,species, 'DiscrimType',DiscrimType);


%Predecir para todos los ejemplos que tenemos:
y_pred = predict(Mdl,meas); 

%Matriz de confusion:
confusionmat(species, y_pred);
%Para guardar tambien el orden de las clases:
[confusion_matrix, cm_order] = confusionmat(species, y_pred);

fprintf('Matriz de confusion para datos de etrenamiento con el discriminante %s\n', DiscrimType);
fprintf('El orden de las clases es: \n');
fprintf('\t - %s \n \t - %s \n \t - %s \n', cm_order{1}, cm_order{2}, cm_order{3});

%En sustitucion del fprint anterior podriamos ejecutar solo ORDERCM
fprintf('La matriz de confusion es: \n');
disp(confusion_matrix);

%Calculo de VP, VN, FP, FN para la clase setosa:
VP=confusion_matrix(1,1);
VN=confusion_matrix(2,2)+confusion_matrix(2,3)+confusion_matrix(3,2)+confusion_matrix(3,3);
FP=confusion_matrix(2,1)+confusion_matrix(3,1);
FN=confusion_matrix(1,2)+confusion_matrix(1,3);

%Medidas de rendimiento
EX=(VP+VN)/(VP+VN+FP+FN); %Exactitud
S=VP/(VP+FN);     %Sensibilidad
P=VP/(VP+FP);    %Precision
VPN=VN/(VN+FN);  %Valor predictivo negativo
ES=VN/(VN+FP);   %Especificidad
F1SCORE=2*((P*S)/(P+S));

%Salida de los datos
fprintf('Las medidas de rendimiento del modelo son: \n')
fprintf('\t ·Exactitud: %d \n', EX)
fprintf('\t ·Sensibilidad: %d \n', S)
fprintf('\t ·Precision: %d \n', P)
fprintf('\t ·VPN: %d \n', VPN)
fprintf('\t ·Especificidad: %d \n', ES)
fprintf('\t ·F1SCORE: %d \n', F1SCORE)